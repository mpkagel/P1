// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.DataAccess;

namespace Project1.DataAccess.Migrations
{
    [DbContext(typeof(Project1Context))]
    [Migration("20210720235958_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project1.DataAccess.Cupcake", b =>
                {
                    b.Property<int>("CupcakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValueSql("((6.00))");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CupcakeId");

                    b.HasIndex(new[] { "Type" }, "UQ__Cupcake__F9B8A48BBF33A5C9")
                        .IsUnique();

                    b.ToTable("Cupcake", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId")
                        .HasName("PK__CupcakeO__C3905BCFC5A85BD9");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("CupcakeOrder", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrderItem", b =>
                {
                    b.Property<int>("CupcakeOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CupcakeId")
                        .HasColumnType("int")
                        .HasColumnName("CupcakeID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CupcakeOrderItemId");

                    b.HasIndex("CupcakeId");

                    b.HasIndex(new[] { "OrderId", "CupcakeId" }, "OrderToCupcake")
                        .IsUnique();

                    b.ToTable("CupcakeOrderItem", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultLocation")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.HasIndex("DefaultLocation");

                    b.ToTable("Customer", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IngredientId");

                    b.HasIndex(new[] { "Type" }, "UQ__Ingredie__F9B8A48BFB6A0D37")
                        .IsUnique();

                    b.ToTable("Ingredient", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("LocationId");

                    b.ToTable("Location", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.LocationInventory", b =>
                {
                    b.Property<int>("LocationInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,6)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.HasKey("LocationInventoryId");

                    b.HasIndex("IngredientId");

                    b.HasIndex(new[] { "LocationId", "IngredientId" }, "InventoryIngredient")
                        .IsUnique();

                    b.ToTable("LocationInventory", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.RecipeItem", b =>
                {
                    b.Property<int>("RecipeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,6)");

                    b.Property<int>("CupcakeId")
                        .HasColumnType("int")
                        .HasColumnName("CupcakeID");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.HasKey("RecipeItemId");

                    b.HasIndex("IngredientId");

                    b.HasIndex(new[] { "CupcakeId", "IngredientId" }, "CupcakeIngredient")
                        .IsUnique();

                    b.ToTable("RecipeItem", "Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrder", b =>
                {
                    b.HasOne("Project1.DataAccess.Customer", "Customer")
                        .WithMany("CupcakeOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.DataAccess.Location", "Location")
                        .WithMany("CupcakeOrders")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Order_Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrderItem", b =>
                {
                    b.HasOne("Project1.DataAccess.Cupcake", "Cupcake")
                        .WithMany("CupcakeOrderItems")
                        .HasForeignKey("CupcakeId")
                        .HasConstraintName("FK_OrderItem_Cupcake")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.DataAccess.CupcakeOrder", "Order")
                        .WithMany("CupcakeOrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_CupcakeOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cupcake");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project1.DataAccess.Customer", b =>
                {
                    b.HasOne("Project1.DataAccess.Location", "DefaultLocationNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("DefaultLocation")
                        .HasConstraintName("FK_Default_Location");

                    b.Navigation("DefaultLocationNavigation");
                });

            modelBuilder.Entity("Project1.DataAccess.LocationInventory", b =>
                {
                    b.HasOne("Project1.DataAccess.Ingredient", "Ingredient")
                        .WithMany("LocationInventories")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_Ingredient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.DataAccess.Location", "Location")
                        .WithMany("LocationInventories")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Project1.DataAccess.RecipeItem", b =>
                {
                    b.HasOne("Project1.DataAccess.Cupcake", "Cupcake")
                        .WithMany("RecipeItems")
                        .HasForeignKey("CupcakeId")
                        .HasConstraintName("FK_Recipe_Cupcake")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.DataAccess.Ingredient", "Ingredient")
                        .WithMany("RecipeItems")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_Recipe_Ingredient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cupcake");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Project1.DataAccess.Cupcake", b =>
                {
                    b.Navigation("CupcakeOrderItems");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrder", b =>
                {
                    b.Navigation("CupcakeOrderItems");
                });

            modelBuilder.Entity("Project1.DataAccess.Customer", b =>
                {
                    b.Navigation("CupcakeOrders");
                });

            modelBuilder.Entity("Project1.DataAccess.Ingredient", b =>
                {
                    b.Navigation("LocationInventories");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Project1.DataAccess.Location", b =>
                {
                    b.Navigation("CupcakeOrders");

                    b.Navigation("Customers");

                    b.Navigation("LocationInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
